test <- read.delim("C:/Users/17621/Desktop/test.txt",header = T)
test$Trdmnt <- as.character.Date(test$Trdmnt,"%y%m")
test$Trdmnt <- as.character(test$Trdmnt,"%y%m")
test$Trdmnt
plot(test$Trdmnt,test$Msmvosd,type = "b")
test <- test$Trdmnt
test <- read.delim("C:/Users/17621/Desktop/test.txt",header = T)
test$Trdmnt <- as.Date(test$Trdmnt,"%y%m")
date <- test$Trdmnt
test$Trdmnt <- as.Date.character(test$Trdmnt,"%y%m")
date <- test$Trdmnt
test$Trdmnt <- as.character(test$Trdmnt,"%y%m")
date <- test$Trdmnt
date <- strptime(test$Trdmnt,"%Y-%m")
View(test)
View(test)
View(date)
date <- strptime(test$Trdmnt,"%Y-%m")
View(date)
test <- read.delim("C:/Users/17621/Desktop/test.txt",header = T)
date <- strptime(test$Trdmnt,"%Y-%m")
date
date <- seq.Date(as.Date("2018-01"),by="month",length = 28)
a <- as.Date("2018/01/01","%y%m")
a
strDates <- c("2018/01/01")
date <- as.Date(strDates,"%y%m")
date
strDates <- c("01/05/1965", "06/16/1975")
dates <- as.Date(strDates, "%m/%d/%Y")
dates
strDates <- c("01/01/2018")
date <- as.Date(strDates,"%y%m")
date
date <- as.Date(strDates,"%y%m%d")
date
date <- as.Date(strDates,"%m%d%y")
date
strDates <- c("01/01/2018")
dates <- as.Date(strDates, "%m/%d/%Y")
strDates <- c("01/01/2018")
dates <- as.Date(strDates,"%y%m")
dates
dates <- as.Date(strDates, "%m-%d-%Y")
dates
strDates <- c("01/01/2018")
dates <- as.Date(strDates, "%m/%d/%Y")
dates <- as.Date(strDates, "%y-%m")
dates <- as.Date(strDates, "%y/%m")
dates <- as.Date(strDates, "%y/%m/%d")
dates <- as.Date(strDates, "%Y/%m/%d")
test <- read.delim("C:/Users/17621/Desktop/test.txt",header = T)
date <- strptime(test$Trdmnt,"%y/%m")
date <- as.Date(test$Trdmnt,"%y/%m")
date <- as.character.Date(test$Trdmnt,"%y/%m")
test <- read.delim("C:/Users/17621/Desktop/test.txt",header = T)
plot(test$Msmvosd,type = "b")
plot(test$Msmvosd,type = "l
")
plot(test$Msmvosd,type = "l,b")
date <- st(test$Trdmnt,"%y/%m")
test <- read.delim("C:/Users/17621/Desktop/test.txt",header = T)
date <- st(test$Trdmnt,"%y/%m")
date <- as.Date(test$Trdmnt,"%y/%m")
test <- read.delim("C:/Users/17621/Desktop/test.txt",header = T)
date <- as.Date(test$Trdmnt,"%y/%m")
View(test)
install.packages(c("forecast", "tseries"))
test <- read.delim("C:/Users/17621/Desktop/test.txt",header = T)
tdata <- ts(test$Msmvosd, start = c(2018,1),frequency = 27)
tdata
tdata <- ts(test$Msmvosd, start = c(2018,1),frequency =12)
tdata
plot(tdata)
tdata <- ts(test$Msmvosd, start = c(2018,01),frequency =12)
plot(tdata)
ndata <- test$Msmvosd
library(forecast)
opar <- par(no.readonly = T)
par(mfrow = c(2,2))
ylim <- c(min(ntest),max(ntest))
plot(ntest, main = "Raw time series")
ylim <- c(min(ndata),max(ndata))
plot(ndata, main = "Raw time series")
plot(tdata,ndata, main = "Raw time series")
AirPassengers
plot(AirPassengers)
plot(test)
plot(ndata)
fit <- stl(ndata,s.window = "period")
plot(AirPassengers)
lAirpaeengers <- log(AirPassengers)
plot(lAirPassengers, s.window = "period")
lAirPassenger <- log(AirPassengers)
plot(lAirPassengers, s.window = "period")
plot(lAirPassenger, s.window = "period")
plot(AirPassengers)
plot(AirPassengers)
lAirpassengers <- log(AirPassengers)
plot(lAirPassengers, s.window = "period")
plot(lAirpassengers, s.window = "period")
# Listing 15.3 - Seasonal decomposition using slt()
plot(AirPassengers)
lAirPassengers <- log(AirPassengers)
plot(lAirPassengers, ylab="log(AirPassengers)")
fit <- stl(lAirPassengers, s.window="period")
plot(fit)
fit$time.series
exp(fit$time.series)
# Listing 15.3 - Seasonal decomposition using slt()
plot(AirPassengers)
lAirPassengers <- log(AirPassengers)
plot(lAirPassengers, ylab="log(AirPassengers)")
fit <- stl(lAirPassengers, s.window = "period")
plot(fit)
view(fit)
View(fit)
View(fit)
fit$time.series
exp(fit$time.searies)
exp(fit$time.series)
par(mfrow = c(2,1))
library(forecast)
monthplot(AirPassengers, xlab = " ", ylab = " ")
seasonplot(AirPassengers, y.labels = "T", main = " ")
fit <- ets(nhtemp, model = "ANN")
fit
forecast(fit,1)
accurancy(fit)
accuracy(fit)
plot(forecast(fit, 1), xlab="Year",
ylab=expression(paste("Temperature (", degree*F,")",)),
main="New Haven Annual Mean Temperature")
library(forecast)
fit <- ets(log(AirPassengers), model = "AAA")
fit
accuracy(fit)
pred <- forecast(fit,5)
pred
plot(pred, main = "Forecast",
ylab = "Log(AirPassengers)",
xlab = "Times")
pred$mean <- exp(pred$mean)
pred$upper <- exp(pred$upper)
pred$lower <- exp(pred$lower)
p <- cbind(pred$mean,pred$lower,pred$upper)
dimnames(p)[[2]] <- c("mean","Lo 80","Lo 95","Hi 80","Hi 95")
p
fit <- ets(JohnsonJohnson)
fit
library(forecast)
fit <- ets(JohnsonJohnson)
fit
plot(forecast(fit), main="Johnson and Johnson Forecasts",
ylab="Quarterly Earnings (Dollars)", xlab="Time")
par(mfrow = c(1,1))
# Listing 15.7 - Transforming the time series and assessing stationarity
library(forecast)
data = {}
detach("package:base", unload = TRUE)
library(car)
install.packages("plyr")
install.packages(c("forecast", "tseries"))
library(nCov2019)
install.packages("vcd")
install.packages("Hmisc")
install.packages("sqldf")
install.packages("reshape2")
install.packages(c("plotrix", "sm", "vioplot"))
install.packages(c("doBy", "ggm", "gmodels", "pastecs", "psych", "reshape"))
install.packages(c("bootstrap", "effects", "gvlma", "leaps"))
install.packages(c("effects", "gplots", "HH", "multcomp", "mvoutlier", "rrcov"))
install.packages("pwr")
install.packages(c("corrgram", "hexbin", "rgl", "scatterplot3d"))
install.packages(c("coin", "lmPerm"))
install.packages(c("openxlsx", "ps", "rlang", "tidyr", "zoo"))
install.packages(c("openxlsx", "ps", "rlang", "tidyr", "zoo"))
install.packages(c("openxlsx", "ps", "rlang", "tidyr", "zoo"))
library(car)
library(car)
plot(carHexsticker())
plot(cars)
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
spark_install(version = "2.4.3", hadoop_version = "2.7")
sc <- spark_connect(master = "local")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
spark_install(version = "2.4.3", hadoop_version = "2.7")
sc <- spark_connect(master = "local")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
spark_install(version = "2.4.3", hadoop_version = "2.7")
sc <- spark_connect(master = "local")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
spark_install(version = "2.4.3", hadoop_version = "2.7")
sc <- spark_connect(master = "local")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
spark_install(version = "2.4.3", hadoop_version = "2.7")
sc <- spark_connect(master = "local")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
spark_install(version = "2.4.3", hadoop_version = "2.7")
sc <- spark_connect(master = "local")
setwd("~/R studio project")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
library(sparklyr)
library(dplyr)
spark_install(version = "2.4.3", hadoop_version = "2.7")
install.packages("flextable")
install.packages("flextable")
library(flextable)
library(officer)
head(mtcars)
myft <- flextable(
head(mtcars),
)
myft <- flextable(
head(mtcars),
col_keys = c("am","carb","gear, "mpg", "drat")
)
myft <- flextable(
head(mtcars),
col_keys = c("am","carb","gear, "mpg", "drat"))
library(flextable)
library(officer)
myft <- flextable(
head(mtcars),
)
myft <- flextable(
head(mtcars),
col_keys = c("am","carb","gear","mpg","drat"))
myft
print(myft, preview = "docx")
update.packages()
#导入数据并定义#
licai <- read.table("C:/Users/17621/Desktop/理财副本.csv", header=TRUE,sep=",")
library(plyr)
licai <- rename(licai,c(性别="gender",文化程度="education level",省="province",婚姻状况="married",个人是否有经管类专业学习经历="experience of finance",
投资风险厌恶水平="The level of risk reverse",金融知识1="finance problem1",金融知识2="finance problem2",
金融知识题回答情况="The condition of the answer of financial problems",
房地产="real estate",基金="fund",股票="stock",债券="bond",互联网理财="internet planning",金融理财="financial planning",金融衍生品="derivative",黄金="gold",
非人民币资产="no RMB asset",养老保险="pension insurance",
医疗保险="medical issurance",商业保险="business issurance",教育投资="educational investment"))
myvar <- c("gender","education level","province","married","experience of finance",
"The level of risk reverse","finance problem1","finance problem2","The condition of the answer of financial problems",
"real estate","fund","stock","bond","internet planning","financial planning","derivative","gold","no RMB asset","pension insurance",
"medical issurance","business issurance","educational investment")
licai1 <- licai[myvar]
licai1$`education level`<- as.numeric(licai1$`education level`)
licai1$`experience of finance`<- as.numeric(licai1$`experience of finance`)
licai1$married <- as.numeric(licai1$married)
licai1$gender <- factor(licai1$gender,
levels=c(0,1),
labels = c("male","femal"))
licai1$`education level` <- factor(licai1$`education level`,
levels=c(0:8),
labels = c("none","primary","junior high","senior high","special school","college","undergraduate",
"master","doctor"))
licai1$`The level of risk reverse` <- factor(licai1$`The level of risk reverse`,
levels=c(0:5),
labels = c("Risk Preference","Little Risk Preference","Risk Neutral","Little Risk Reverse",
"Risk Reverse","Else"))
licai1$`The condition of the answer of financial problems` <- factor(licai1$`The condition of the answer of financial problems`,
levels=c(0:2),
labels = c("none","one","two"))
licai1$`real estate` <- factor(licai1$`real estate`,
levels=c(0,1),
labels = c("No","Yes"))
licai1$fund <- factor(licai1$fund,
levels=c(0,1),
labels = c("No","Yes"))
licai1$stock <- factor(licai1$stock,
levels=c(0,1),
labels = c("No","Yes"))
licai1$bond <- factor(licai1$bond,
levels=c(0,1),
labels = c("No","Yes"))
licai1$derivative <- factor(licai1$derivative,
levels=c(0,1),
labels = c("No","Yes"))
licai1$gold <- factor(licai1$gold,
levels=c(0,1),
labels = c("No","Yes"))
licai1$`internet planning` <- factor(licai1$`internet planning`,
levels=c(0,1),
labels = c("No","Yes"))
licai1$`financial planning` <- factor(licai1$`financial planning`,
levels=c(0,1),
labels = c("No","Yes"))
licai1$`pension insurance` <- factor(licai1$`pension insurance`,
levels=c(0,1),
labels = c("No","Yes"))
licai1$`medical issurance`<- factor(licai1$`medical issurance`,
levels=c(0,1),
labels = c("No","Yes"))
licai1$`business issurance` <- factor(licai1$`business issurance`,
levels=c(0,1),
labels = c("No","Yes"))
licai1$`educational investment` <- factor(licai1$`educational investment`,
levels=c(0,1),
labels = c("No","Yes"))
licai1$`no RMB asset` <- factor(licai1$`no RMB asset`,
levels=c(0,1),
labels = c("No","Yes"))
licai1$`experience of finance`<- factor(licai1$`experience of finance`,
levels=c(0,1),
labels = c("Yes","No"))
licai1$`finance problem1`<- factor(licai1$`finance problem1`,
levels=c(0,1),
labels = c("No","Yes"))
licai1$`finance problem2`<- factor(licai1$`finance problem2`,
levels=c(0,1),
labels = c("No","Yes"))
fit <- glm(stock~licai1$`The level of risk reverse`+licai1$`The condition of the answer of financial problems`,data = licai1,family = binomial())
summary(fit)
par(mfrow=c(2,2))
plot(fit)
c(1,2,3)+c(4,4,10)
c(1,2,3)+c(4,1,2)
c(1.2.3)+c(4,1)
c(1,2,3)+c(4,1,2)
a=1:10
aa=seq(.1,1.1)
aa
aa=seq(.1,1,length.out = 10)
aa
names=c("bob","jon","alex","josn")
grad1(85,90,60,99)
names=c("bob","jon","alex","josn")
grade1 = c(85,90,60,99)
grade2 = c(75,80,75,95)
grade_tab=data.frame(names,grade1,grade2)
names=c("bob","john","alex","josn")
grade1 = c(85,90,60,99)
grade2 = c(75,80,75,95)
grade_tab=data.frame(names,grade1,grade2)
### part 2: install and load R packages
### example 1, Quantmod package
# install.packages(鈥淨uantmod鈥?)  # install the Quantmod package
library(quantmod)   # Load the package
getSymbols("AAPL")  # Download daily prices of Apple stock from Yahoo
dim(AAPL)  # (dimension): See the size of the downloaded data.
head(AAPL)  # See the first 6 rows of the data
tail(AAPL)   # See the last 6 rows of the data
chartSeries(AAPL,theme="white")  # Plot the daily price and volume
chartSeries(AAPL)#Not shown giving the same plot with black background.
getSymbols("AAPL")  # Download daily prices of Apple stock from Yahoo
dim(AAPL)  # (dimension): See the size of the downloaded data.
head(AAPL)  # See the first 6 rows of the data
tail(AAPL)   # See the last 6 rows of the data
chartSeries(AAPL,theme="white")  # Plot the daily price and volume
chartSeries(AAPL)#Not shown giving the same plot with black background.
library(quantmod)
getSymbols("NQ=F")
dim(NQ=F)
head(NQ=F)
getSymbols("NQ=F")
View(`NQ=F`)
library(quantmod)   # Load the package
getSymbols("AAPL")  # Download daily prices of Apple stock from Yahoo
dim(AAPL)  # (dimension): See the size of the downloaded data.
head(AAPL)  # See the first 6 rows of the data
tail(AAPL)   # See the last 6 rows of the data
chartSeries(AAPL,theme="white")  # Plot the daily price and volume
chartSeries(AAPL)#Not shown giving the same plot with black background.
getSymbols("AAPL",from="2005-01-02", to="2010-12-31")
head(AAPL)
getSymbols("UNRATE",src="FRED")#Download unemployment rates from FRED.
head(UNRATE,8) # See the first  8 rows of the data
tail(UNRATE,8) # See the last  8 rows of the data
chartSeries(UNRATE,theme="white")  # Plot monthly unemployment rates
getSymbols("INTC",src="google")  # Download data from Google.
head(INTC)
getSymbols("^TNX") # Download CBOE 10-year Treasures Notes
head(TNX)
tail(TNX)
chartSeries(TNX,theme="white",TA=NULL) # Obtain plot without volume.
### example 2, rugarch package
# install.packages("rugarch")
library(rugarch)
library(quantmod)
getSymbols("AAPL",from="2007-01-03",to="2020-9-28") #Specify period
AAPL.rtn=diff(log(AAPL$AAPL.Adjusted)) # Compute log returns
AAPL.close = AAPL$AAPL.Close
chartSeries(AAPL.close,theme="white") # Get the plot of close price
chartSeries(AAPL.rtn,theme="white") # Get the plot of log returns
spec = ugarchspec(mean.model=list(armaOrder=c(0,0),
include.mean=T),distribution.model="norm") # model specification
aapl_ret = zoo(AAPL.rtn) # To get the zoo type data
gfit_norm = ugarchfit(spec=spec,data=aapl_ret[2:2189])
plot(gfit_norm)
install.packages("rnorm")
install.packages("rnorm")
install.packages("windR")
install.packages("windR")
install.packages("windR")
install.packages("windR")
install.packages(""windR)
install.packages("windR")
install.packages("stargazer")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
